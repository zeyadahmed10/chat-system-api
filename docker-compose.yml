version: '3.8'

services:
  db:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: chat_system_development
      # MYSQL_HOST: db
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - backend
    # healthcheck:
    #   test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  redis:
    image: redis:7.2-alpine
    # environment:
    #   REDIS_HOST: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    # healthcheck:
    #   test: ["CMD", "redis-cli", "ping"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
      # - ES_HOST=elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - backend
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  app:
    build: .
    #command: sh -c "sh test.sh elasticsearch:9200"
    command:  sh -c "sh healthCheck.sh elasticsearch:9200 && sh initDB.sh && sh initES.sh && (bundle exec rails s -p 3000 -b '0.0.0.0' & bundle exec sidekiq)"
    environment:
      MYSQL_HOST: db
      MYSQL_USER: root
      MYSQL_PASSWORD: password
      REDIS_HOST: redis
      ES_HOST: elasticsearch
    ports:
      - "3001:3000"
    depends_on:
      - db
      - redis
      - elasticsearch
    networks:
      - backend

volumes:
  db_data:
  redis_data:
  es_data:

networks:
  backend:
    driver: bridge